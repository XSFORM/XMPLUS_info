from __future__ import annotations

from datetime import datetime, timezone

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    CallbackQuery,
    BotCommand,
    BotCommandScopeDefault,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    MenuButtonCommands,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from sqlalchemy import select, delete

from app.db import SessionLocal, Item
from app.config import settings
from app.utils import (
    parse_datetime_human,
    fmt_dt_human,
    now_tz,
    to_tz,
    tz_offset_str,
    get_active_timezone_name,
    set_active_timezone_name,
)

router = Router()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é Telegram
BOT_COMMANDS = [
    BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
    BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å (–º–∞—Å—Ç–µ—Ä: USERID ‚Üí USERNAME ‚Üí –¥–∞—Ç–∞/–≤—Ä–µ–º—è)"),
    BotCommand(command="renew", description="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ USERID"),
    BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –ø–æ USERID (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)"),
    BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –¥–∞—Ç–µ)"),
    BotCommand(command="disabled", description="–°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö)"),
    BotCommand(command="next", description="–ë–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è"),
    BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
    BotCommand(command="timezone", description="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (TZ)"),
    BotCommand(command="cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥"),
    BotCommand(command="menu", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
    BotCommand(command="hide", description="–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
]


def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/add"), KeyboardButton(text="/renew")],
            [KeyboardButton(text="/list"), KeyboardButton(text="/disabled")],
            [KeyboardButton(text="/next"), KeyboardButton(text="/status")],
            [KeyboardButton(text="/delete"), KeyboardButton(text="/help")],
            [KeyboardButton(text="/timezone"), KeyboardButton(text="/cancel")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É‚Ä¶",
        selective=True,
    )


def confirm_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
        selective=True,
    )


def choose_by_due_kb(prefix: str, items: list[Item], extra_row: list[InlineKeyboardButton] | None = None) -> InlineKeyboardMarkup:
    buttons = []
    for it in items:
        label = f"{fmt_dt_human(it.due_date)} ‚Ä¢ {it.username}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"{prefix}:choose:{it.id}")])
    if extra_row:
        buttons.append(extra_row)
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def date_copy_kb(date_str: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É", callback_data=f"send_date:{date_str}")],
        [InlineKeyboardButton(text="üìé –í—Å—Ç–∞–≤–∏—Ç—å –¥–∞—Ç—É –≤ –ø–æ–ª–µ", switch_inline_query_current_chat=date_str)],
    ])


async def set_bot_commands(bot: Bot) -> None:
    await bot.set_my_commands(commands=BOT_COMMANDS, scope=BotCommandScopeDefault())
    try:
        await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    except Exception:
        pass


@router.message(CommandStart())
@router.message(F.text == "/start")
async def on_start(message: Message) -> None:
    await message.answer(
        "‚úÖ XMPLUS –∑–∞–ø—É—â–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã ‚Äî –≤ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ —Å –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏) –∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb(),
    )


@router.message(Command("help"))
@router.message(F.text == "/help")
async def on_help(message: Message) -> None:
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        + "\n".join([f"/{c.command} ‚Äî {c.description}" for c in BOT_COMMANDS])
        + "\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, /hide ‚Äî —Å–∫—Ä—ã—Ç—å."
    )
    await message.answer(text, reply_markup=main_menu_kb())


@router.message(Command("menu"))
@router.message(F.text == "/menu")
async def show_menu(message: Message) -> None:
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞.", reply_markup=main_menu_kb())


@router.message(Command("hide"))
@router.message(F.text == "/hide")
async def hide_menu(message: Message) -> None:
    await message.answer("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove())


@router.message(Command("status"))
@router.message(F.text == "/status")
async def on_status(message: Message) -> None:
    async with SessionLocal() as session:
        total = (await session.execute(select(Item))).scalars().unique().all()
    await message.answer(
        f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ\n–í –±–∞–∑–µ –∑–∞–ø–∏—Å–µ–π: {len(total)}\nACTIVE_TZ: {get_active_timezone_name()} (UTC{tz_offset_str()})",
        reply_markup=main_menu_kb(),
    )


# ==== –¢–∞–π–º–∑–æ–Ω–∞: –ø–æ–∫–∞–∑ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ ====

def tz_switch_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="GMT+5 ‚Ä¢ Ashgabat", callback_data="tz:set:Asia/Ashgabat"),
            InlineKeyboardButton(text="GMT+8 ‚Ä¢ Singapore", callback_data="tz:set:Asia/Singapore"),
        ]
    ])


@router.message(Command("timezone"))
@router.message(F.text == "/timezone")
async def show_timezone(message: Message) -> None:
    local_now = now_tz()
    utc_now = datetime.now(timezone.utc)

    text = (
        f"–ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {get_active_timezone_name()} (UTC{tz_offset_str()})\n"
        f"–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {local_now.strftime('%Y-%m-%d %H:%M:%S %Z')}\n"
        f"UTC:            {utc_now.strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n"
        "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å:"
    )
    await message.answer(text, reply_markup=tz_switch_kb())


@router.callback_query(F.data.startswith("tz:set:"))
async def tz_set(cb: CallbackQuery) -> None:
    await cb.answer()
    tz_name = cb.data.split(":", 2)[-1]
    ok = set_active_timezone_name(tz_name)
    if ok:
        await cb.message.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz_name} (UTC{tz_offset_str()})")
    else:
        await cb.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


# ==== –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ====

class AddStates(StatesGroup):
    waiting_user_id = State()
    waiting_username = State()
    waiting_duedatetime = State()


@router.message(Command("cancel"))
@router.message(F.text == "/cancel")
async def on_cancel(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())


@router.message(Command("add"))
@router.message(F.text == "/add")
async def add_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(AddStates.waiting_user_id)
    await message.answer("–®–∞–≥ 1/3. –í–≤–µ–¥–∏—Ç–µ USER ID (—á–∏—Å–ª–æ):", reply_markup=main_menu_kb())


@router.message(AddStates.waiting_user_id)
async def add_user_id(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("USER ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.", reply_markup=main_menu_kb())
        return
    await state.update_data(user_id=int(text))
    await state.set_state(AddStates.waiting_username)
    await message.answer("–®–∞–≥ 2/3. –í–≤–µ–¥–∏—Ç–µ USERNAME (–Ω–∞–ø—Ä–∏–º–µ—Ä, XmADMIN):", reply_markup=main_menu_kb())


@router.message(AddStates.waiting_username)
async def add_username(message: Message, state: FSMContext) -> None:
    username = (message.text or "").strip()
    if not username:
        await message.answer("USERNAME –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.", reply_markup=main_menu_kb())
        return
    await state.update_data(username=username)
    await state.set_state(AddStates.waiting_duedatetime)
    await message.answer(
        "–®–∞–≥ 3/3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "YYYY-MM-DD HH:MM:SS\n"
        "–ü—Ä–∏–º–µ—Ä: 2025-10-20 15:35:43",
        reply_markup=main_menu_kb(),
    )


@router.message(AddStates.waiting_duedatetime)
async def add_duedatetime(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    dt = parse_datetime_human(text)
    if not dt:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ YYYY-MM-DD HH:MM:SS, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-10-20 15:35:43\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.",
            reply_markup=main_menu_kb(),
        )
        return

    data = await state.get_data()
    user_id = data["user_id"]
    username = data["username"]

    async with SessionLocal() as session:
        item = Item(
            user_id=user_id,
            username=username,
            due_date=dt,
            chat_id=message.chat.id,
        )
        session.add(item)
        await session.commit()
        await session.refresh(item)

    await state.clear()
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: [{item.id}] USERID={user_id}, USERNAME={username}, DUE={fmt_dt_human(dt)}",
        reply_markup=main_menu_kb(),
    )


# ==== –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ USERID (/renew) ====

class RenewStates(StatesGroup):
    waiting_userid = State()
    waiting_new_due = State()
    waiting_confirm = State()


@router.message(Command("renew"))
@router.message(F.text == "/renew")
async def renew_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(RenewStates.waiting_userid)
    await message.answer("–£–∫–∞–∂–∏ USERID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å:", reply_markup=main_menu_kb())


@router.message(RenewStates.waiting_userid)
async def renew_find_by_userid(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("USERID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.", reply_markup=main_menu_kb())
        return
    uid = int(text)

    async with SessionLocal() as session:
        result = await session.execute(select(Item).where(Item.user_id == uid).order_by(Item.due_date.asc()))
        items = result.scalars().all()

    if not items:
        await message.answer("–ó–∞–ø–∏—Å–µ–π —Å —Ç–∞–∫–∏–º USERID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel.", reply_markup=main_menu_kb())
        return

    if len(items) == 1:
        it = items[0]
        await state.update_data(item_id=it.id, user_id=it.user_id, username=it.username, old_due=fmt_dt_human(it.due_date))
        await state.set_state(RenewStates.waiting_new_due)
        await message.answer(
            "–ö–ª–∏–µ–Ω—Ç:\n"
            f"USERID: {it.user_id}\n"
            f"USERNAME: {it.username}\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {fmt_dt_human(it.due_date)}",
            reply_markup=date_copy_kb(fmt_dt_human(it.due_date)),
        )
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM:SS",
            reply_markup=main_menu_kb(),
        )
        return

    kb = choose_by_due_kb("renew", items)
    await message.answer("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —ç—Ç–æ–º—É USERID. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –ø–æ –¥–∞—Ç–µ:", reply_markup=kb)


@router.callback_query(F.data.startswith("renew:choose:"))
async def renew_choose_item(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    try:
        item_id = int(cb.data.split(":")[-1])
    except Exception:
        return
    async with SessionLocal() as session:
        it = await session.get(Item, item_id)
    if not it:
        await cb.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /renew.", reply_markup=main_menu_kb())
        return

    await state.update_data(item_id=it.id, user_id=it.user_id, username=it.username, old_due=fmt_dt_human(it.due_date))
    await state.set_state(RenewStates.waiting_new_due)
    await cb.message.answer(
        "–ö–ª–∏–µ–Ω—Ç:\n"
        f"USERID: {it.user_id}\n"
        f"USERNAME: {it.username}\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {fmt_dt_human(it.due_date)}",
        reply_markup=date_copy_kb(fmt_dt_human(it.due_date)),
    )
    await cb.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nYYYY-MM-DD HH:MM:SS",
        reply_markup=main_menu_kb(),
    )


@router.message(RenewStates.waiting_new_due)
async def renew_get_new_due(message: Message, state: FSMContext) -> None:
    s = (message.text or "").strip()
    dt = parse_datetime_human(s)
    if not dt:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM:SS.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.",
            reply_markup=main_menu_kb(),
        )
        return
    new_due = fmt_dt_human(dt)
    data = await state.get_data()
    await state.update_data(new_due=new_due)
    await state.set_state(RenewStates.waiting_confirm)
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ:\n"
        f"USERID: {data['user_id']}\n"
        f"USERNAME: {data['username']}\n"
        f"–ë—ã–ª–æ: {data['old_due']}\n"
        f"–°—Ç–∞–Ω–µ—Ç: {new_due}",
        reply_markup=confirm_kb(),
    )


@router.message(RenewStates.waiting_confirm)
async def renew_confirm(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip().lower()
    if text not in ("‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–¥–∞", "ok", "–æ–∫"):
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())
        return

    data = await state.get_data()
    item_id = int(data["item_id"])
    new_due_str = data["new_due"]

    async with SessionLocal() as session:
        item = await session.get(Item, item_id)
        if not item:
            await state.clear()
            await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_kb())
            return
        dt = parse_datetime_human(new_due_str)
        if not dt:
            await state.clear()
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb())
            return

        item.due_date = dt
        item.notified_count = 0
        item.last_notified_at = None
        await session.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ –ü—Ä–æ–¥–ª–µ–Ω–æ: USERID={data['user_id']}, USERNAME={data['username']}\n"
        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ DUE={new_due_str}",
        reply_markup=main_menu_kb(),
    )


@router.callback_query(F.data.startswith("send_date:"))
async def send_date(cb: CallbackQuery) -> None:
    await cb.answer()
    date_str = cb.data.split(":", 1)[1]
    await cb.message.answer(date_str)


# ==== –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ USERID (/delete) ====

class DeleteStates(StatesGroup):
    waiting_userid = State()
    waiting_confirm = State()


@router.message(Command("delete"))
@router.message(F.text == "/delete")
async def delete_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(DeleteStates.waiting_userid)
    await message.answer(
        "–£–∫–∞–∂–∏ USERID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"
        "–ï—Å–ª–∏ –ø–æ USERID –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –ø–æ –¥–∞—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ä–∞–∑—É.",
        reply_markup=main_menu_kb(),
    )


@router.message(DeleteStates.waiting_userid)
async def delete_by_userid(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("USERID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.", reply_markup=main_menu_kb())
        return
    uid = int(text)

    async with SessionLocal() as session:
        result = await session.execute(select(Item).where(Item.user_id == uid).order_by(Item.due_date.asc()))
        items = result.scalars().all()

    if not items:
        await message.answer("–ü–æ —ç—Ç–æ–º—É USERID –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ /cancel.", reply_markup=main_menu_kb())
        return

    if len(items) == 1:
        it = items[0]
        preview = f"USERID={it.user_id}, USERNAME={it.username}, DUE={fmt_dt_human(it.due_date)}"
        await state.update_data(action="one", item_id=it.id, user_id=it.user_id)
        await state.set_state(DeleteStates.waiting_confirm)
        await message.answer("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n" + preview, reply_markup=confirm_kb())
        return

    extra = [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ USERID", callback_data=f"delete:all:{uid}")]
    kb = choose_by_due_kb("delete", items, extra_row=extra)
    await message.answer("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –ø–æ –¥–∞—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ:", reply_markup=kb)


@router.callback_query(F.data.startswith("delete:choose:"))
async def delete_choose_one(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    try:
        item_id = int(cb.data.split(":")[-1])
    except Exception:
        return
    async with SessionLocal() as session:
        it = await session.get(Item, item_id)
    if not it:
        await cb.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /delete.", reply_markup=main_menu_kb())
        return

    preview = f"USERID={it.user_id}, USERNAME={it.username}, DUE={fmt_dt_human(it.due_date)}"
    await state.update_data(action="one", item_id=it.id, user_id=it.user_id)
    await state.set_state(DeleteStates.waiting_confirm)
    await cb.message.answer("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?\n" + preview, reply_markup=confirm_kb())


@router.callback_query(F.data.startswith("delete:all:"))
async def delete_choose_all(cb: CallbackQuery, state: FSMContext) -> None:
    await cb.answer()
    try:
        uid = int(cb.data.split(":")[-1])
    except Exception:
        return
    await state.update_data(action="all", user_id=uid)
    await state.set_state(DeleteStates.waiting_confirm)
    await cb.message.answer(f"–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –¥–ª—è USERID={uid}?", reply_markup=confirm_kb())


@router.message(DeleteStates.waiting_confirm)
async def delete_confirm(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip().lower()
    if text not in ("‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–¥–∞", "ok", "–æ–∫"):
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())
        return

    data = await state.get_data()
    async with SessionLocal() as session:
        if data.get("action") == "one":
            await session.execute(delete(Item).where(Item.id == int(data["item_id"])))
            await session.commit()
            msg = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: –∑–∞–ø–∏—Å—å USERID={data['user_id']}"
        else:
            await session.execute(delete(Item).where(Item.user_id == int(data["user_id"])))
            await session.commit()
            msg = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è USERID={data['user_id']}"

    await state.clear()
    await message.answer(msg, reply_markup=main_menu_kb())


# ==== –°–ø–∏—Å–∫–∏/–±–ª–∏–∂–∞–π—à–∏–µ ====

@router.message(Command("list"))
@router.message(F.text == "/list")
async def on_list(message: Message) -> None:
    async with SessionLocal() as session:
        result = await session.execute(select(Item).order_by(Item.due_date.asc()))
        items = result.scalars().all()

    if not items:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_menu_kb())
        return

    lines = [f"[{it.id}] {it.user_id} | {it.username} | {fmt_dt_human(it.due_date)}" for it in items]
    header = "ID | USERID | USERNAME | DUE DATE\n" + "-" * 40
    await message.answer(header + "\n" + "\n".join(lines), reply_markup=main_menu_kb())


@router.message(Command("disabled"))
@router.message(F.text == "/disabled")
async def on_disabled(message: Message) -> None:
    now = now_tz()
    async with SessionLocal() as session:
        result = await session.execute(select(Item).order_by(Item.due_date.asc()))
        items = result.scalars().all()

    expired = [it for it in items if to_tz(it.due_date) <= now]
    if not expired:
        await message.answer("–û—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö) –Ω–µ—Ç.", reply_markup=main_menu_kb())
        return

    lines = [f"[{it.id}] {it.user_id} | {it.username} | {fmt_dt_human(it.due_date)}" for it in expired]
    header = "Disabled (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ):\n" + "-" * 40
    await message.answer(header + "\n" + "\n".join(lines), reply_markup=main_menu_kb())


@router.message(Command("next"))
@router.message(F.text == "/next")
async def on_next(message: Message) -> None:
    async with SessionLocal() as session:
        result = await session.execute(select(Item).order_by(Item.due_date.asc()).limit(10))
        items = result.scalars().all()

    if not items:
        await message.answer("–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∏—Å—Ç–µ—á–µ–Ω–∏–π.", reply_markup=main_menu_kb())
        return

    lines = [f"[{it.id}] {it.user_id} | {it.username} | {fmt_dt_human(it.due_date)}" for it in items]
    await message.answer("–ë–ª–∏–∂–∞–π—à–∏–µ:\n" + "\n".join(lines), reply_markup=main_menu_kb())